-- get pixels, but not limited to the graphics data section, can go beyond.
function vget(offset, x, y)
    x = min(max(0, x), 127)\1
    y = y\1

    local val = peek(y*64+offset+x\2)
    if x%2 == 1 then return (val & 0xf0) >>> 4
    else             return (val & 0x0f) end
end

-- px9 compression
function px9_comp(x0,y0,w,h,dest,vget)
    local dest0=dest
    local bit=1
    local byte=0

    local function vlist_val(l, val)
        -- find position and move
        -- to head of the list

--[ 2-3x faster than block below
        local v,i=l[1],1
        while v!=val do
            i+=1
            v,l[i]=l[i],v
        end
        l[1]=val
        return i
--]]

--[[ 8 tokens smaller than above
        for i,v in ipairs(l) do
            if v==val then
                add(l,deli(l,i),1)
                return i
            end
        end
--]]
    end

    local cache,cache_bits=0,0
    function putbit(bval)
     cache=cache<<1|bval
     cache_bits+=1
        if cache_bits==8 then
            poke(dest,cache)
            dest+=1
            cache,cache_bits=0,0
        end
    end

    function putval(val, bits)
        for i=bits-1,0,-1 do
            putbit(val>>i&1)
        end
    end

    function putnum(val)
        local bits = 0
        repeat
            bits += 1
            local mx=(1<<bits)-1
            local vv=min(val,mx)
            putval(vv,bits)
            val -= vv
        until vv<mx
    end


    -- first_used

    local el={}
    local found={}
    local highest=0
    for y=y0,y0+h-1 do
        for x=x0,x0+w-1 do
            c=vget(x,y)
            if not found[c] then
                found[c]=true
                add(el,c)
                highest=max(highest,c)
            end
        end
    end

    -- header

    local bits=1
    while highest >= 1<<bits do
        bits+=1
    end

    putnum(w-1)
    putnum(h-1)
    putnum(bits-1)
    putnum(#el-1)
    for i=1,#el do
        putval(el[i],bits)
    end


    -- data

    local pr={} -- predictions

    local dat={}

    for y=y0,y0+h-1 do
        for x=x0,x0+w-1 do
            local v=vget(x,y)

            local a=y>y0 and vget(x,y-1) or 0

            -- create vlist if needed
            local l=pr[a] or {unpack(el)}
            pr[a]=l

            -- add to vlist
            add(dat,vlist_val(l,v))
           
            -- and to running list
            vlist_val(el, v)
        end
    end

    -- write
    -- store bit-0 as runtime len
    -- start of each run

    local nopredict
    local pos=1

    while pos <= #dat do
        -- count length
        local pos0=pos

        if nopredict then
            while dat[pos]!=1 and pos<=#dat do
                pos+=1
            end
        else
            while dat[pos]==1 and pos<=#dat do
                pos+=1
            end
        end

        local splen = pos-pos0
        putnum(splen-1)

        if nopredict then
            -- values will all be >= 2
            while pos0 < pos do
                putnum(dat[pos0]-2)
                pos0+=1
            end
        end

        nopredict=not nopredict
    end

    if cache_bits>0 then
        -- flush
        poke(dest,cache<<8-cache_bits)
        dest+=1
    end

    return dest-dest0
end


function log(logstr)
    printh(logstr)
    print(logstr)
    flip()
end

function encode_cart(message, cartname, w, h, func)
    reload(0x8000, 0x0000, 0x3000, cartname)
    log(message.." | pos: "..tostr(ENCODE_OFFSET, 0x1)) -- show numbers as hex
    ENCODE_OFFSET += px9_comp(0,0,w,h,ENCODE_OFFSET,func)
    return ENCODE_OFFSET
end

function myinit()
    ENCODE_OFFSET=10
    local enc_vget = function(...) return vget(0x8000, ...) end

    cls()
    memset(0x0000, 0, 0x3100)
    local write_len = 0

                                              log("gfx             | pos: 0x0000")
                                              log("gfx2/map2       | pos: 0x1000")
                                              log("map             | pos: 0x2000")
                                              log("gfx flags       | pos: 0x3000")
                                              log("song            | pos: 0x3100")
                                              log("sfx             | pos: 0x3200")
                                              log("end of cart     | pos: 0x4300")
                                              log()

    poke2(0x0000, ENCODE_OFFSET) encode_cart     ("pokemon 0-63   ",    "001-064.p8", 128, 128, enc_vget)
    poke2(0x0002, ENCODE_OFFSET) encode_cart     ("pokemon 64-127 ",  "065-128.p8", 128, 128, enc_vget)
    poke2(0x0004, ENCODE_OFFSET) encode_cart     ("pokemon 128-151", "129-151.p8", 128, 128, enc_vget)

    poke(0x5f56, 0xa0) -- mget points to the loaded map.
    poke2(0x0006, ENCODE_OFFSET) encode_cart     ("picodex skin   ",    "129-151.p8", 34,  12,  mget)
    poke2(0x0008, ENCODE_OFFSET) encode_move_data("pokemon moves  ", g_move_data)

                                              log("end of compile  | pos: "..tostr(ENCODE_OFFSET, 0x1))

    -- reserve the rest for sfx. as of writing, around 20 sfx slots were available here.
    -- need 10 for pkmn cries. and maybe a few random sfxes. not sure if we could fit an actual song or not...
    reload(ENCODE_OFFSET, ENCODE_OFFSET, 0x4300 - ENCODE_OFFSET, "129-151.p8")

                                              log("copy remaining  | pos: 0x4300 ")

    -- then finally save to the game cartridge.
    cstore(0x0000, 0x0000, 0x4300, "game.p8")
    log("done!")
end

-- poke a 1 byte val and increment offset
function offsetpoke(val)
    poke(ENCODE_OFFSET, val)
    ENCODE_OFFSET += 1
end

-- 0xff means a dash
-- 0x00 means next pkmn
function encode_move_data(message, data)
    log(message.." | pos: "..tostr(ENCODE_OFFSET, 0x1)) -- show numbers as hex

    data = split(data, "\n")
    for line in all(data) do
        if line ~= "" then
            local fields = split(line, "|")
            for field in all(fields) do
                if type(field) == "number" then
                    offsetpoke(field)
                else
                    local range = split(field,"-")
                    offsetpoke(range[1])
                    offsetpoke(0xff)
                    offsetpoke(range[2])
                end
            end
        end
        offsetpoke(0x00)
    end
    offsetpoke(0x00)
end

-- from missingno (0) to mew (151), these are the tms they can learn.
-- 1-50 are tms. 51-55 are hms. There shouldn't be anything higher than that.
g_move_data =
[[43|12|1-3|5|6|9-11|13|14|17|19|20|25-27|29|30|44|45|49-52
88|79|105|70|108|107|106|110|22|3|6|8-10|20|21|31-34|44|50|51
88|79|105|70|108|107|106|110|22|3|6|8-10|20|21|31-34|44|50|51
88|79|105|70|108|107|106|110|22|3|6|8-10|15|20|21|31-34|44|50|51
88|63|95|86|20|164|96|113|1|3|5|6|8-10|17-19|23|28|31-34|38-40|44|50|51|54
88|63|95|86|20|164|96|113|1|3|5|6|8-10|17-19|23|28|31-34|38-40|44|50|51|54
88|63|95|86|20|164|96|113|1|3|5|6|8-10|15|17-19|23|26-28|31-34|38-40|44|50-52|54
79|82|152|12|87|128|40|98|1|5|6|8-11|13|14|17-20|28|31-34|44|50|53|54
79|82|152|12|87|128|40|98|1|5|6|8-11|13|14|17-20|28|31-34|44|50|53|54
79|82|152|12|87|128|40|98|1|5|6|8-11|13-15|17-20|26-28|31-34|44|50|53|54
112|79
124
116|108-110|91|4|66|99|2|6|9|10|15|20-22|29-34|39|44|46|50|55
83|112
124
78|133|84|20|85|119|3|6|9|10|15|21|31-34|39|40|44|50|51
66|75|120|4|67|119|134|2|6|9|10|20|31-34|39|43|44|50|52
66|75|120|4|67|119|134|2|6|9|10|20|31-34|39|43|44|50|52
66|75|120|4|67|119|134|2|6|9|10|15|20|31-34|39|43|44|50|52
79|82|120|160|133|163|6|8-12|14|20|24|25|28|31|32|34|39|40|44|50
79|82|120|160|133|163|6|8-15|20|24|25|28|31|32|34|39|40|44|50
88|101|86|78|134|102|119|2|4|6|9|10|20|31|32|34|39|43|44|50|52
88|101|86|78|134|102|119|2|4|6|9|10|15|20|31|32|34|39|43|44|50|52
86|80|83|87|146|122|94|6|8-10|20|21|26-28|31|32|34|40|44|48|50|54
86|80|83|87|146|122|94|6|8-10|15|20|21|26-28|31|32|34|40|44|48|50|54
88|114|82|45|32|120|69|39|24|119|25|131|1|5|6|8-10|16|17|19|20|31|33|34|40|44|50|55
88|114|45|1|5|6|8-10|15-17|19|20|24|25|31-34|39|40|44|50|55
63|75|164|83|39|158|3|6|8-10|17|19|20|26-28|31|32|34|40|44|48|50|51|54
63|75|164|83|39|158|3|6|8-10|15|17|19|20|26-28|31|32|34|40|44|48|50|51|54
88|79|63|83|82|87|158|72|6|8-10|14|20|24|25|31-34|40|44|50
88|79|63|83|82|87|158|72|6-14|20|24|25|31-34|40|44|50
79|82|63|72|83|8|1|5-7|9-20|24-27|31-34|38|40|44|48|50|53|54
86|79|77|83|133|78|7|72|6|8-10|14|20|24|25|31-34|40|44|50
86|79|77|83|133|78|7|72|6|8-14|20|24|25|31-34|40|44|50
79|77|72|83|81|1|5-20|24-27|31-34|38|40|44|48|50|53|54
88|56|90|58|125|35|129|131|1|5|6|8-14|17-20|22|24|25|29-34|38|40|44-46|49|50|54|55
58|35|125|90|1|5|6|8-15|17-20|22|24|25|29-34|38|40|44-46|49|50|54|55
95|82|120|89|127|96|113|6|8-10|20|28|31-34|38-40|44|50
95|120|89|82|6|8-10|15|20|28|31-34|38-40|44|50
90|56|93|129|58|44|8|10|1|5|6|9|11-14|17-20|22|24|25|29-34|38|40|45|46|49|50|54|55
129|93|58|90|1|5|6|8-15|17-20|22|24|25|29-34|38|40|44-46|49|50|54|55
149|91|87|127|67|132|2|4|6|9|10|20|21|31|32|34|39|44|50
149|122|91|87|127|67|132|2|4|6|9|10|15|20|21|31|32|34|39|44|50
104|108-110|94|111|22|3|6|9|10|20|21|31-34|44|50|51
104|108-110|94|111|22|3|6|9|10|20|21|31-34|44|50|51
94|111|108-110|3|6|8-10|15|20-22|31-34|44|50|51
63|109|149|154|164|106|3|6|8-10|20-22|28|31-34|40|44|50|51
63|109|149|154|164|106|3|6|8-10|15|20-22|28|31-34|40|44|50|51
93|79|91|116|108|149|109|99|110|29|6|9|10|20-22|31-34|44|46|50|55
116|93|91|79|108|149|109|99|110|29|2|4|6|9|10|15|20-22|30-34|39|44|46|50|55
63|88|28|75|164|26|6|8-10|20|27|31|32|34|44|48|50|51
63|88|28|75|164|26|6|8-10|15|20|27|31|32|34|44|48|50|51
88|63|87|16|122|158|164|6|8-12|20|24|25|31|32|34|39|40|44|50
88|63|87|16|122|158|164|6|8-12|15|20|24|25|31|32|34|39|40|44|50
63|82|93|116|158|98|1|5|6|8-14|16-20|28|31|32|34|39|40|44|50|53|54
63|82|93|116|158|98|1|5|6|8-20|28|31|32|34|39|40|44|50|53|54
86|63|103|57|158|133|19|81|122|1|5|6|8-10|16-18|20|24|25|28|31|32|34|35|39|40|44|48|50|54
86|63|103|57|158|133|20|19|122|81|1|5|6|8-10|15-18|24|25|28|31|32|34|35|39|40|44|48|50|54
87|89|95|86|9|119|96|6|8|10|20|23|28|31-34|38-40|44|50
95|86|89|9|6|8|10|15|20|23|28|30-34|38-40|44|50
152|117|12|58|8|143|98|6|9-11|13|14|20|29|31|32|34|40|44|46|50|53
152|117|12|58|8|143|98|1|5|6|9-11|13|14|17-20|26|27|29|31|32|34|35|40|44|46|50|53|54
8|58|117|12|1|5|6|9-11|13-15|17-20|26|27|29|31|32|34|35|40|44|46|50|53|54
30|1|5|6|8-10|17-20|29|31-35|40|44-46|49|50|55
144|30|116|93|99|123|29|33|1|5|6|8-10|17-20|28|31|32|34|35|40|44-46|49|50|55
144|30|116|93|99|123|29|33|1|5|6|8-10|15|17-20|28|31|32|34|35|40|44-46|49|50|55
57|103|86|133|19|17|1|5|6|8-10|18|20|26-28|31|32|34|35|38|40|44|48|50|54
57|103|86|133|19|17|1|5|6|8-10|18|20|26-28|31|32|34|35|38|40|44|48|50|54
57|103|86|133|19|17|1|5|6|8-10|15|18|20|26-28|31|32|34|35|38|40|44|48|50|54
106|70|80|108|110|109|94|107|69|3|6|9|10|20-22|31-34|44|50|51
106|70|80|108|110|109|94|107|69|3|6|9|10|20-22|31-34|44|50|51
94|107|109|80|108|110|3|6|8-10|15|20-22|31-34|44|50|51
94|91|80|83|12|142|130|122|98|3|6|9-11|13|14|20|21|31-34|40|44|50|51|53
94|91|80|83|12|142|130|122|98|3|6|9-11|13-15|20|21|31-34|40|44|50|51|53
79|129|115|36|124|26|47|1|6|8-10|17-20|27|28|31|32|34|35|38|44|48|50|54
79|129|115|36|124|26|47|1|6|8-10|17-20|27|28|31|32|34|35|38|44|48|50|54
79|129|115|36|124|26|47|1|5|6|8-10|15|17-20|27|28|31|32|34|35|38|44|48|50|54
95|82|71|88|113|9|119|6-8|10|20|31-34|38-40|44|50
95|82|71|88|113|9|119|6-8|10|15|20|31-34|38-40|44|50
116|93|76|88|12|143|29|6|8-11|13|14|16|20|26-28|30-34|38-40|44-46|49|50|53-55
116|93|76|88|12|128|143|29|1|5|6|8-11|13-20|26-28|30-34|38-40|44-46|49|50|53-55
79|92|114|91|45|39|122|6|9|10|20|24|25|30-34|44|50|55
79|92|114|91|45|39|122|6|9|10|15|20|24|25|30-34|44|50|55
101|75|86|78|3|119|164|2|4|6|8-10|20|31-34|39|40|44|50-52
101|88|78|102|20|49|119|4|6|8-10|31-34|40|43|44|50|52
101|88|78|102|20|49|119|4|6|8-10|15|31-34|40|43|44|50|52
76|88|100|44|9|13|6-8|10-12|14|16|20|31|32|34|40|50|53|54
76|88|100|44|9|13|6-8|10-12|14-16|20|31|32|34|40|50|53|54
93|56|147|125|137|124|122|156|6|8|20|21|24|25|31|32|34|36|38|44|47|50
93|56|147|125|137|124|122|156|6|8|15|20|21|24|25|31|32|34|36|38|44|47|50
79|128|91|140|100|86|13|6|9-12|14|20|30-34|36|39|44|47|49|50|53
100|140|91|128|141|6|9-15|20|30-34|36|39|44|47|49|50|53
127|135|121|117|42|6|20|21|24|25|29|31|32|34|36|44|46|47|50
127|135|121|117|42|6|20|21|24|25|29|31|32|34|36|44|46|47|50
127|135|121|117|42|1|5|6|8-10|15|17-21|24|25|29|31|32|34-36|40|44|46|47|50|54
122|79|68|115|20|69|124|6|8-10|26-28|31|32|34|36|40|44|47|48|50|54
117|56|93|116|76|147|29|118|1|5|6|8-10|17-20|30-35|40|42|44-46|49|50|55
117|56|93|116|76|147|29|118|1|5|6|8-10|15|17-20|30-35|40|42|44-46|49|50|55
152|86|64|65|71|157|124|3|6|8-14|20|31|32|34|44|50|51|53|54
152|86|64|65|71|157|124|3|6|8-15|20|31|32|34|44|50|51|53|54
122|79|92|36|131|39|47|6|9|20|24|25|30-34|44|45|50|55
122|79|92|36|131|39|47|6|9|15|20|24|25|30-34|40|44|45|50|55
148|117|33|105|109|108|22|110|6|9|10|20|29-32|34|36|37|44|46|47|50
148|117|71|6|9|10|15|20-22|29-34|36|37|44|46|47|50|54
88|138|82|76|86|133|81|159|20|1|5|6|8-14|17-19|26-28|31|32|34|38|40|44|50|54
88|138|82|76|86|133|81|159|20|1|5|6|8-15|17-19|26-28|31|32|34|38|40|44|50|54
72|118|74|73|133|145|5|1|6|8-10|17-20|31|32|34|35|39|40|44|50|54
119|59-62|1|18|5|6|8-10|17|19|20|31|32|34|35|39|40|44|50|54
91|80|71|93|129|69|122|1|3|5|6|8-15|17-20|24-27|31|32|34|38|40|44|50|51|53|54
136|79|137|126|36|132|47|6|20|24|25|31|32|34|38|44|50
136|79|137|126|36|132|47|6|15|20|24|25|31|32|34|38|44|50
77|71|82|78|7|86|9|6|8|10|20|24-28|31|32|34|38|40|44|48|50|54
77|71|82|78|7|86|9|1|5|6|8|10-20|24-28|31|32|34|38|40|44|48|50|53|54
56|82|58|90|88|125|129|131|10|1|5|6|8|9|11-15|17-20|22|24|25|29-35|37|38|40|41|44-46|49|50|54|55
142|68|104|70|108-110|69|106|3|6|8-10|15|20-22|31|32|34|40|44|50|51
59|20|87|82|1|86|153|5|6|8-15|17-19|24-27|31|32|34|38|40|44|48|50|53|54
152|126|86|12|119|98|6|9-11|13|14|20|31|32|34|39|40|44|50|53
152|126|86|12|119|98|6|9-11|13-15|20|31|32|34|39|40|44|50|53
101|82|91|77|78|139|7|119|6|9-14|20|31|32|34|39|40|44|50|53
101|82|91|77|78|139|7|119|6|9-15|20|31|32|34|39|40|44|50|53
79|12|124|123|39|125|131|98|6|9-11|13|14|20|24|25|29-34|40|44-46|49|50|53|55
124|79|12|6|9-11|13-15|20|24|25|29-34|39|40|44-46|49|50|53|55
130|116|131|58|118|50|1|5|6|8-10|15|17-20|22|24|25|29-35|40|44-46|55
120|86|133|32|164|3|119|67|6|9|10|15|20|31|34|39|40|44|50|51
150|56|135|58|61|8|81|14|1|5|6|9-13|15|17-20|29-35|40|44|46|50
86|120|114|122|62|131|25|1|5|6|8-10|15|17-20|24|29-35|39|40|44-46|50|54|55
95|86|127|60|126|136|96|1|5|6|8-10|15|17-20|29-32|34|35|38|40|44|46|50|54
64|68|19|65|133|124|164|3|6|8-10|15|17|20|31|32|34|44|50|51|54
79|71|82|86|20|9|6-8|10|13-15|24-27|31|32|34|38|40|44|50|54
155|79
79|87|23|86|98|15|6|8-14|20|24|25|31-34|38|40|44|50|53|54
88|12|90|97|8|127|13|98|6|7|9-11|14|15|20|22-25|29|31-34|40|44|46|50|53|54
151
79|75|88|120|82|133|87|9|6|8|10|20|31-34|39|40|44|50
79|75|120|12|100|82|87|132|156|97|98|6|8-11|13-15|20|31-34|39|40|44|50|53
79|75|120|114|82|72|45|119|85|25|6|8-10|15|20|24|31-34|39|40|44|50|55
79|75|120|95|82|87|136|113|86|20|96|6|8-10|15|31-34|38-40|44|50
162|161|79|99|123|119|49|6|9|10|13-15|20|24|25|29-34|39|40|44-46|50|55
12|128|77|86|141|98|6|8-11|13|14|20|31-34|44|50|53
12|128|77|86|141|98|6-11|13-15|17|19|20|31-34|40|44|50|53
124|63|104|164|86|98|6|8-14|20|31-34|44|50|53
124|63|104|164|86|98|2|3|5|6|8-15|17|19|20|31-34|40|44|50|51|53
119|67|91|87|9|15|2|4|6|10|20|23|31-34|38|39|43|44|50|52
143|76|44|8|124|10|15|1|5|6|9|11-14|16-20|22|24-27|29|31-36|38|40|46|48|50|53|54
13|101|14|119|97|2|4|6|9-12|15|20|31-34|39|43|44|50|52
102|114|25|119|131|2|4|6|9|10|15|20|24|31-34|39|43-45|50|52|55
113|101|86|119|43|2|4|6|9|10|15|20|31-34|38|39|44|50|52
86|80|45|119|69|23|15|6|8-14|20|24|25|31-34|38-40|44|50|53
86|80|45|119|69|23|15|6-14|20|24|25|31-34|38-40|44|50|53
86|80|45|119|69|23|15|2|6-14|20|24|25|31-34|38-40|44|50|53|54
116|93|39|130|29|123|97|143|1|5|6|8-20|22|24|25|30-36|38|40|44-46|49|50|54|55
56|151|1|35|29|2-28|30-34|36-55]]

myinit()
