-- get pixels, but not limited to the graphics data section, can go beyond.
function vget(offset, x, y)
    x = min(max(0, x), 127)\1
    y = y\1

    local val = peek(y*64+offset+x\2)
    if x%2 == 1 then return (val & 0xf0) >>> 4
    else             return (val & 0x0f) end
end

-- px9 compression
function px9_comp(x0,y0,w,h,dest,vget)
    local dest0=dest
    local bit=1
    local byte=0

    local function vlist_val(l, val)
        -- find position and move
        -- to head of the list

--[ 2-3x faster than block below
        local v,i=l[1],1
        while v!=val do
            i+=1
            v,l[i]=l[i],v
        end
        l[1]=val
        return i
--]]

--[[ 8 tokens smaller than above
        for i,v in ipairs(l) do
            if v==val then
                add(l,deli(l,i),1)
                return i
            end
        end
--]]
    end

    local cache,cache_bits=0,0
    function putbit(bval)
     cache=cache<<1|bval
     cache_bits+=1
        if cache_bits==8 then
            poke(dest,cache)
            dest+=1
            cache,cache_bits=0,0
        end
    end

    function putval(val, bits)
        for i=bits-1,0,-1 do
            putbit(val>>i&1)
        end
    end

    function putnum(val)
        local bits = 0
        repeat
            bits += 1
            local mx=(1<<bits)-1
            local vv=min(val,mx)
            putval(vv,bits)
            val -= vv
        until vv<mx
    end


    -- first_used

    local el={}
    local found={}
    local highest=0
    for y=y0,y0+h-1 do
        for x=x0,x0+w-1 do
            c=vget(x,y)
            if not found[c] then
                found[c]=true
                add(el,c)
                highest=max(highest,c)
            end
        end
    end

    -- header

    local bits=1
    while highest >= 1<<bits do
        bits+=1
    end

    putnum(w-1)
    putnum(h-1)
    putnum(bits-1)
    putnum(#el-1)
    for i=1,#el do
        putval(el[i],bits)
    end


    -- data

    local pr={} -- predictions

    local dat={}

    for y=y0,y0+h-1 do
        for x=x0,x0+w-1 do
            local v=vget(x,y)

            local a=y>y0 and vget(x,y-1) or 0

            -- create vlist if needed
            local l=pr[a] or {unpack(el)}
            pr[a]=l

            -- add to vlist
            add(dat,vlist_val(l,v))
           
            -- and to running list
            vlist_val(el, v)
        end
    end

    -- write
    -- store bit-0 as runtime len
    -- start of each run

    local nopredict
    local pos=1

    while pos <= #dat do
        -- count length
        local pos0=pos

        if nopredict then
            while dat[pos]!=1 and pos<=#dat do
                pos+=1
            end
        else
            while dat[pos]==1 and pos<=#dat do
                pos+=1
            end
        end

        local splen = pos-pos0
        putnum(splen-1)

        if nopredict then
            -- values will all be >= 2
            while pos0 < pos do
                putnum(dat[pos0]-2)
                pos0+=1
            end
        end

        nopredict=not nopredict
    end

    if cache_bits>0 then
        -- flush
        poke(dest,cache<<8-cache_bits)
        dest+=1
    end

    return dest-dest0
end


function log(logstr)
    printh(logstr)
    print(logstr)
    flip()
end

function encode_cart(message, cartname, w, h, func)
    reload(0x8000, 0x0000, 0x3000, cartname)
    log(message.." | pos: "..tostr(ENCODE_OFFSET, 0x1)) -- show numbers as hex
    ENCODE_OFFSET += px9_comp(0,0,w,h,ENCODE_OFFSET,func)
    return ENCODE_OFFSET
end

function myinit()
    ENCODE_OFFSET=10
    local enc_vget = function(...) return vget(0x8000, ...) end

    cls()
    memset(0x0000, 0, 0x3100)
    local write_len = 0

                                                 log("gfx             | pos: 0x0000")
                                                 log("gfx2/map2       | pos: 0x1000")
                                                 log("map             | pos: 0x2000")
                                                 log("gfx flags       | pos: 0x3000")
                                                 log("song            | pos: 0x3100")
                                                 log("sfx             | pos: 0x3200")
                                                 log("end of cart     | pos: 0x4300")
                                                 log()

    poke2(0x0000, ENCODE_OFFSET) encode_cart        ("pokemon 0-63   ",    "001-064.p8", 128, 128, enc_vget)
    poke2(0x0002, ENCODE_OFFSET) encode_cart        ("pokemon 64-127 ",  "065-128.p8", 128, 128, enc_vget)
    poke2(0x0004, ENCODE_OFFSET) encode_cart        ("pokemon 128-151", "129-151.p8", 128, 128, enc_vget)

    poke(0x5f56, 0xa0) -- mget points to the loaded map.
    poke2(0x0006, ENCODE_OFFSET) encode_cart        ("picodex skin   ",    "129-151.p8", 34,  12,  mget)
    poke2(0x0008, ENCODE_OFFSET) encode_machine_data("machine moves  ", g_machine_move_data)

                                                 log("end of compile  | pos: "..tostr(ENCODE_OFFSET, 0x1))

    -- the cutoff allows the last half of sfx data. no music data is available.
    reload(0x3980, 0x3980, 0x0980, "129-151.p8")

    -- then finally save to the game cartridge.
    cstore(0x0000, 0x0000, 0x4300, "game.p8")
    log("done!")
end

-- poke a 1 byte val and increment offset
function offsetpoke(val)
    poke(ENCODE_OFFSET, val)
    ENCODE_OFFSET += 1
end

-- 0xff means a dash
-- 0x00 means next pkmn
function encode_machine_data(message, data)
    log(message.." | pos: "..tostr(ENCODE_OFFSET, 0x1)) -- show numbers as hex

    data = split(data, "\n")
    for line in all(data) do
        if line ~= "" then
            local fields = split(line, "|")
            for field in all(fields) do
                if type(field) == "number" then
                    offsetpoke(field)
                else
                    local range = split(field,"-")
                    offsetpoke(range[1])
                    offsetpoke(0xff)
                    offsetpoke(range[2])
                end
            end
        end
        offsetpoke(0x00)
    end
    offsetpoke(0x00)
end

-- from missingno (0) to mew (151), these are the tms they can learn.
-- 1-50 are tms. 51-55 are hms. There shouldn't be anything higher than that.
g_machine_move_data =
[[1-3|5|6|9-11|13|14|17|19|20|25-27|29|30|44|45|49-52
3|6|8-10|20|21|31-34|44|50|51
3|6|8-10|20|21|31-34|44|50|51
3|6|8-10|15|20|21|31-34|44|50|51
1|3|5|6|8-10|17-19|23|28|31-34|38-40|44|50|51|54
1|3|5|6|8-10|17-19|23|28|31-34|38-40|44|50|51|54
1|3|5|6|8-10|15|17-19|23|26-28|31-34|38-40|44|50|51|54
1|5|6|8-11|13|14|17-20|28|31-34|44|50|53|54
1|5|6|8-11|13|14|17-20|28|31-34|44|50|53|54
1|5|6|8-11|13-15|17-20|26-28|31-34|44|50|53|54


2|6|9|10|15|20-22|29-34|39|44|46|50


3|6|9|10|15|21|31-34|39|40|44|50|51
2|6|9|10|20|31-34|39|43|44|50|52
2|6|9|10|20|31-34|39|43|44|50|52
2|6|9|10|15|20|31-34|39|43|44|50|52
6|8-12|14|20|24|25|28|31|32|34|39|40|44|50
6|8-15|20|24|25|28|31|32|34|39|40|44|50
2|4|6|9|10|20|31|32|34|39|43|44|50|52
2|4|6|9|10|15|20|31|32|34|39|43|44|50|52
6|8-10|20|21|26-28|31|32|34|40|44|48|50|54
6|8-10|15|20|21|26-28|31|32|34|40|44|48|50|54
1|5|6|8-10|16|17|19|20|24|31-34|40|44|50|53|55
1|5|6|8-10|15-17|19|20|24|25|31-34|39|40|44|50|55
3|6|8-10|17|19|20|26-28|31|32|34|40|44|48|50|51|54
3|6|8-10|15|17|19|20|26-28|31|32|34|40|44|48|50|51|54
6|8-10|14|20|24|25|31-34|40|44|50
6-14|20|24|25|31-34|40|44|50
1|5-7|9-20|24-27|31-34|38|40|44|48|50|53|54
6|8-10|14|20|24|25|31-34|40|44|50
6|8-14|20|24|25|31-34|40|44|50
1|5-20|24-27|31-34|38|40|44|48|50|53|54
1|5|6|8-14|17-20|22|24|25|29-34|38|40|44-46|49|50|54|55
1|5|6|8-15|17-20|22|24|25|29-34|38|40|44-46|49|50|54|55
6|8-10|20|28|31-34|38-40|44|50
6|8-10|15|20|28|31-34|38-40|44|50
1|5|6|9|11-14|17-20|22|24|25|29-34|38|40|45|46|49|50|54|55
1|5|6|8-15|17-20|22|24|25|29-34|38|40|44-46|49|50|54|55
2|4|6|9|10|20|21|31|32|34|39|44|50
2|4|6|9|10|15|20|21|31|32|34|39|44|50
3|6|9|10|20|21|31-34|44|50|51
3|6|9|10|20|21|31-34|44|50|51
3|6|8-10|15|20-22|31-34|44|50|51
3|6|8-10|20-22|28|31-34|40|44|50|51
3|6|8-10|15|20-22|28|31-34|40|44|50|51
6|9|10|20-22|31-34|44|46|50
2|4|6|9|10|15|20-22|30-34|39|44|46|50
6|8-10|20|27|31|32|34|44|48|50
6|8-10|15|20|27|31|32|34|44|48|50
6|8-12|20|24|25|31|32|34|39|40|44|50
6|8-12|15|20|24|25|31|32|34|39|40|44|50
1|5|6|8-14|16-20|28|31|32|34|39|40|44|50|53|54
1|5|6|8-20|28|31|32|34|39|40|44|50|53|54
1|5|6|8-10|16-18|20|24|25|28|31|32|34|35|39|40|44|48|50|54
1|5|6|8-10|15-18|20|24|25|28|31|32|34|35|39|40|44|48|50|54
6|8|10|20|23|28|31-34|38-40|44|50
6|8|10|15|20|23|28|30-34|38-40|44|50
6|9-11|13|14|20|29|31|32|34|40|44|46|50|53
1|5|6|9-11|13|14|17-20|26|27|29|31|32|34|35|40|44|46|50|53|54
1|5|6|9-11|13-15|17-20|26|27|29|31|32|34|35|40|44|46|50|53|54
1|5|6|8-10|17-20|29|31-35|40|44-46|49|50|55
1|5|6|8-10|17-20|28|31|32|34|35|40|44-46|49|50|55
1|5|6|8-10|15|17-20|28|31|32|34|35|40|44-46|49|50|55
1|5|6|8-10|18|20|26-28|31|32|34|35|38|40|44|48|50|54
1|5|6|8-10|18|20|26-28|31|32|34|35|38|40|44|48|50|54
1|5|6|8-10|15|18|20|26-28|31|32|34|35|38|40|44|48|50|54
3|6|9|10|20-22|31-34|44|50|51
3|6|9|10|20-22|31-34|44|50|51
3|6|8-10|15|20-22|31-34|44|50|51
3|6|9-11|13|14|20|21|31-34|40|44|50|51|53
3|6|9-11|13-15|20|21|31-34|40|44|50|51|53
1|6|8-10|17-20|27|28|31|32|34|35|38|44|48|50|54
1|6|8-10|17-20|27|28|31|32|34|35|38|44|48|50|54
1|5|6|8-10|15|17-20|27|28|31|32|34|35|38|44|48|50|54
6-8|10|20|31-34|38-40|44|50
6-8|10|15|20|31-34|38-40|44|50
6|8-11|13|14|16|20|26-28|30-34|38-40|44-46|49|50|53-55
1|5|6|8-11|13-20|26-28|30-34|38-40|44-46|49|50|53-55
6|9|10|20|24|25|30-34|44|50|55
6|9|10|15|20|24|25|30-34|44|50|55
2|4|6|8-10|20|31-34|39|40|44|50-52
4|6|8-10|31-34|40|43|44|50|52
4|6|8-10|15|31-34|40|43|44|50|52
6-8|10-12|14|16|20|31|32|34|40|50|53|54
6-8|10-12|14-16|20|31|32|34|40|50|53|54
6|8|20|21|24|25|31|32|34|36|38|44|47|50
6|8|15|20|21|24|25|31|32|34|36|38|44|47|50
6|9-12|14|20|30-34|36|39|44|47|49|50|53
6|9-15|20|30-34|36|39|44|47|49|50|53
6|20|21|24|25|29|31|32|34|36|44|46|47|50
6|20|21|24|25|29|31|32|34|36|44|46|47|50
1|5|6|8-10|15|17-21|24|25|29|31|32|34-36|40|44|46|47|50|54
6|8-10|26-28|31|32|34|36|40|44|47|48|50|54
1|5|6|8-10|17-20|30-35|40|42|44-46|49|50|55
1|5|6|8-10|15|17-20|30-35|40|42|44-46|49|50|55
3|6|8-14|20|31|32|34|44|50|51|53|54
3|6|8-15|20|31|32|34|44|50|51|53|54
6|9|20|24|25|30-34|44|45|50|55
6|9|15|20|24|25|30-34|40|44|45|50|55
6|9|10|20|29-32|34|36|37|44|46|47|50
6|9|10|15|20-22|29-34|36|37|44|46|47|50|54
1|5|6|8-14|17-19|26-28|31|32|34|38|40|44|50|54
1|5|6|8-15|17-19|26-28|31|32|34|38|40|44|50|54
1|6|8-10|17-20|31|32|34|35|39|40|44|50|54
5|6|8-10|17|19|20|31|32|34|35|39|40|44|50|54
1|3|5|6|8-15|17-20|24-27|31|32|34|38|40|44|50|51|53|54
6|20|24|25|31|32|34|38|44|50
6|15|20|24|25|31|32|34|38|44|50
6|8|10|20|24-28|31|32|34|38|40|44|48|50|54
1|5|6|8|10-20|24-28|31|32|34|38|40|44|48|50|53|54
1|5|6|8|9|11-15|17-20|22|24|25|29-35|37|38|40|41|44-46|49|50|54|55
3|6|8-10|15|20-22|31|32|34|40|44|50|51
5|6|8-15|17-19|24-27|31|32|34|38|40|44|48|50|53|54
6|9-11|13|14|20|31|32|34|39|40|44|50|53
6|9-11|13-15|20|31|32|34|39|40|44|50|53
6|9-14|20|31|32|34|39|40|44|50|53
6|9-15|20|31|32|34|39|40|44|50|53
6|9-11|13|14|20|24|25|29-34|40|44-46|49|50|53|55
6|9-11|13-15|20|24|25|29-34|39|40|44-46|49|50|53|55
1|5|6|8-10|15|17-20|22|24|25|29-35|40|44-46|55
6|9|10|15|20|31|34|39|40|44|50|51
1|5|6|9-13|15|17-20|29-35|40|44|46|50
1|5|6|8-10|15|17-20|24|29-35|39|40|44-46|50|54|55
1|5|6|8-10|15|17-20|29-32|34|35|38|40|44|46|50|54
6|8-10|15|17|20|31|32|34|44|50|51|54
6-8|10|13-15|24-27|31|32|34|38|40|44|50|54

6|8-14|20|24|25|31-34|38|40|44|50|53|54
6|7|9-11|14|15|20|22-25|29|31-34|40|44|46|50|53|54

6|8|10|20|31-34|39|40|44|50
6|8-11|13-15|20|31-34|39|40|44|50|53
6|8-10|15|20|24|31-34|39|40|44|50|55
6|8-10|15|31-34|38-40|44|50
6|9|10|13-15|20|24|25|29-34|39|40|44-46|50|55
6|8-11|13|14|20|31-34|44|50|53
6-11|13-15|17|19|20|31-34|40|44|50|53
6|8-14|20|31-34|44|50|53
2|3|5|6|8-15|17|19|20|31-34|40|44|50|53
2|4|6|10|20|23|31-34|38|39|43|44|50|52
1|5|6|9|11-14|16-20|22|24-27|29|31-36|38|40|46|48|50|53|54
2|4|6|9-12|15|20|31-34|39|43|44|50|52
2|4|6|9|10|15|20|24|31-34|39|43-45|50|52|55
2|4|6|9|10|15|20|31-34|38|39|44|50|52
6|8-14|20|24|25|31-34|38-40|44|50|53
6-14|20|24|25|31-34|38-40|44|50|53
2|6-14|20|24|25|31-34|38-40|44|50|53|54
1|5|6|8-20|22|24|25|30-36|38|40|44-46|49|50|54|55
2-28|30-34|36-55]]

myinit()
